{"ast":null,"code":"/**\n * Created by Samuel on 6/4/2016.\n * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?\n */\nvar anyBase = require('any-base');\n\nvar uuidV4 = require('uuid/v4');\n\nvar flickrBase58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';\nvar cookieBase90 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~\";\nvar toFlickr;\n/**\n * Takes a UUID, strips the dashes, and translates.\n * @param {string} longId\n * @param {function(string)} translator\n * @returns {string}\n */\n\nfunction shortenUUID(longId, translator) {\n  return translator(longId.toLowerCase().replace(/-/g, ''));\n}\n/**\n * Translate back to hex and turn back into UUID format, with dashes\n * @param {string} shortId\n * @param {function(string)} translator\n * @returns {string}\n */\n\n\nfunction enlargeUUID(shortId, translator) {\n  var uu1 = translator(shortId);\n  var leftPad = \"\";\n  var m; // Pad out UUIDs beginning with zeros (any number shorter than 32 characters of hex)\n\n  for (var i = 0, len = 32 - uu1.length; i < len; ++i) {\n    leftPad += \"0\";\n  } // Join the zero padding and the UUID and then slice it up with match\n\n\n  m = (leftPad + uu1).match(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/); // Accumulate the matches and join them.\n\n  return [m[1], m[2], m[3], m[4], m[5]].join('-');\n}\n\nmodule.exports = function () {\n  /**\n   * @constructor\n   * @param {string?} toAlphabet - Defaults to flickrBase58 if not provided\n   * @returns {{new: (function()),\n   *  uuid: (function()),\n   *  fromUUID: (function(string)),\n   *  toUUID: (function(string)),\n   *  alphabet: (string)}}\n   */\n  function MakeConvertor(toAlphabet) {\n    // Default to Flickr 58\n    var useAlphabet = toAlphabet || flickrBase58; // UUIDs are in hex, so we translate to and from.\n\n    var fromHex = anyBase(anyBase.HEX, useAlphabet);\n    var toHex = anyBase(useAlphabet, anyBase.HEX);\n\n    var generate = function () {\n      return shortenUUID(uuidV4(), fromHex);\n    };\n\n    return {\n      new: generate,\n      generate: generate,\n      uuid: uuidV4,\n      fromUUID: function (uuid) {\n        return shortenUUID(uuid, fromHex);\n      },\n      toUUID: function (shortUuid) {\n        return enlargeUUID(shortUuid, toHex);\n      },\n      alphabet: useAlphabet\n    };\n  } // Expose the constants for other purposes.\n\n\n  MakeConvertor.constants = {\n    flickrBase58: flickrBase58,\n    cookieBase90: cookieBase90\n  }; // Expose the generic v4 UUID generator for convenience\n\n  MakeConvertor.uuid = uuidV4; // Provide a generic generator\n\n  MakeConvertor.generate = function () {\n    if (!toFlickr) {\n      // Generate on first use;\n      toFlickr = anyBase(anyBase.HEX, flickrBase58);\n    }\n\n    return shortenUUID(uuidV4(), toFlickr);\n  };\n\n  return MakeConvertor;\n}();","map":{"version":3,"sources":["/Users/sonjong-il/Desktop/wecode/12-AIG-frontend/node_modules/short-uuid/index.js"],"names":["anyBase","require","uuidV4","flickrBase58","cookieBase90","toFlickr","shortenUUID","longId","translator","toLowerCase","replace","enlargeUUID","shortId","uu1","leftPad","m","i","len","length","match","join","module","exports","MakeConvertor","toAlphabet","useAlphabet","fromHex","HEX","toHex","generate","new","uuid","fromUUID","toUUID","shortUuid","alphabet","constants"],"mappings":"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","sourcesContent":["/**\n * Created by Samuel on 6/4/2016.\n * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?\n */\n\nvar anyBase = require('any-base');\nvar uuidV4 = require('uuid/v4');\n\nvar flickrBase58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';\nvar cookieBase90 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~\";\n\nvar toFlickr;\n\n/**\n * Takes a UUID, strips the dashes, and translates.\n * @param {string} longId\n * @param {function(string)} translator\n * @returns {string}\n */\nfunction shortenUUID (longId, translator) {\n    return translator(longId.toLowerCase().replace(/-/g,''));\n}\n\n/**\n * Translate back to hex and turn back into UUID format, with dashes\n * @param {string} shortId\n * @param {function(string)} translator\n * @returns {string}\n */\nfunction enlargeUUID(shortId, translator) {\n    var uu1 = translator(shortId);\n    var leftPad = \"\";\n    var m;\n\n    // Pad out UUIDs beginning with zeros (any number shorter than 32 characters of hex)\n    for (var i = 0, len = 32-uu1.length; i < len; ++i) {\n        leftPad += \"0\";\n    }\n\n    // Join the zero padding and the UUID and then slice it up with match\n    m = (leftPad + uu1).match(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/);\n\n    // Accumulate the matches and join them.\n    return [m[1], m[2], m[3], m[4], m[5]].join('-');\n}\n\nmodule.exports = (function(){\n\n    /**\n     * @constructor\n     * @param {string?} toAlphabet - Defaults to flickrBase58 if not provided\n     * @returns {{new: (function()),\n     *  uuid: (function()),\n     *  fromUUID: (function(string)),\n     *  toUUID: (function(string)),\n     *  alphabet: (string)}}\n     */\n    function MakeConvertor(toAlphabet) {\n\n        // Default to Flickr 58\n        var useAlphabet = toAlphabet || flickrBase58;\n\n        // UUIDs are in hex, so we translate to and from.\n        var fromHex = anyBase(anyBase.HEX, useAlphabet);\n        var toHex = anyBase(useAlphabet, anyBase.HEX);\n        var generate = function() { return shortenUUID(uuidV4(), fromHex); };\n\n        return {\n            new: generate,\n            generate: generate,\n            uuid: uuidV4,\n            fromUUID: function(uuid) { return shortenUUID(uuid, fromHex); },\n            toUUID: function(shortUuid) { return enlargeUUID(shortUuid, toHex); },\n            alphabet: useAlphabet\n        };\n    }\n\n    // Expose the constants for other purposes.\n    MakeConvertor.constants = {\n        flickrBase58: flickrBase58,\n        cookieBase90: cookieBase90\n    };\n\n    // Expose the generic v4 UUID generator for convenience\n    MakeConvertor.uuid = uuidV4;\n\n    // Provide a generic generator\n    MakeConvertor.generate = function() {\n        if (!toFlickr) {\n            // Generate on first use;\n            toFlickr = anyBase(anyBase.HEX, flickrBase58);\n        }\n        return shortenUUID(uuidV4(), toFlickr);\n    };\n\n    return MakeConvertor;\n}());\n"]},"metadata":{},"sourceType":"script"}